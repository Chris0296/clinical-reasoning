{
  "resourceType": "Library",
  "id": "RuleFilters",
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">library-RuleFilters-1.0.0</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"> logic-library </td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span>http://aphl.org/fhir/ecr/Library/library-FHIRHelpers|4.0.0</span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Patient</span></p></div></td></tr><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library RuleFilters version '1.0.0'\n\nusing FHIR version '4.0.0'\n\ninclude FHIRHelpers version '4.0.0'\n\ncodesystem &quot;UsageContext&quot;: 'http://terminology.hl7.org/CodeSystem/usage-context-type'\nvalueset &quot;Indeterminate or Equivocal Lab Result Value&quot;: 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1146.1035'\nvalueset &quot;Negative or Undetected Lab Result Value&quot;: 'http://cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1146.1034'\n\ncode &quot;focus&quot;: 'focus' from UsageContext\n//code &quot;Chlamydia&quot;: 'Chlamydia'\n\nparameter &quot;Triggering Encounter&quot; Encounter\n\ncontext Patient\n\ndefine &quot;Chlamydia ValueSets&quot;: [Patient]\n  //[ValueSet] ValueSet\n    /* where exists (\n      ValueSet.useContext UseContext\n        where UseContext.code ~ &quot;focus&quot;\n          and not  IsNull(\n            UseContext.value Value\n              where Value.text = 'Chlamydia'\n          )\n    ) */\n\n/* define function ExpandValueSetCodes(value List&lt;ValueSet&gt;):\n  value Value\n    return Value.expansion.contains.code\n\ndefine function ExpandValueSetSystems(value List&lt;ValueSet&gt;):\n  value Value\n    return Value.expansion.contains.system\n\ndefine &quot;Flattened ValueSet Expansion Codes&quot;:\n  flatten( ExpandValueSetCodes(&quot;Chlamydia ValueSets&quot;) )\n\ndefine &quot;Flattened ValueSet Expansion Systems&quot;:\n  flatten( ExpandValueSetSystems(&quot;Chlamydia ValueSets&quot;) )\n\ndefine function ObservationWithSystemAndCodeInChlamydiaValueSets(observation Observation):\n    not IsNull(\n      observation.code  OConcept\n        where exists (\n          OConcept.coding OCoding\n            where ( OCoding.code in &quot;Flattened ValueSet Expansion Codes&quot; )\n               and OCoding.system in &quot;Flattened ValueSet Expansion Systems&quot;\n        )\n    )\n\ndefine function ObservationWithCodeInChlamydiaValueSets(observation Observation):\n  not IsNull(\n    observation.code  OConcept\n      where exists (\n        OConcept.coding OCoding where OCoding.code in flatten( ExpandValueSetCodes(&quot;Chlamydia ValueSets&quot;) )\n      )\n  )\n\ndefine function ChlamydiaObservations(observation Observation):\n  if exists (observation.code.coding.system)\n  then ObservationWithSystemAndCodeInChlamydiaValueSets(observation)\n  else ObservationWithCodeInChlamydiaValueSets(observation)\n\ndefine &quot;Chlamydia Test Results&quot;:\n  [Observation] O\n    where ChlamydiaObservations(O)\n      and O.status in { 'preliminary', 'final', 'amended', 'corrected' }\n\ndefine &quot;Encounter Location References&quot;:\n  &quot;Triggering Encounter&quot; TriggeringEncounter\n    return TriggeringEncounter.location.location\n\ndefine &quot;Locations Matching Encounter Location References&quot;:\n  [Location] Location\n    where exists (\n        &quot;Encounter Location References&quot; LocationReference\n          where Location.id ~ LocationReference.reference\n      )\n\ndefine &quot;Encounter Location Addresses And Patient Addresses&quot;:\n  &quot;Locations Matching Encounter Location References&quot;.address\n    union Patient.address\n\ndefine &quot;Address Elements Relevant to Jurisdiction Qualification&quot;:\n  &quot;Encounter Location Addresses And Patient Addresses&quot; Address\n    return Tuple { state: Address.state,  postalCode: Address.postalCode }\n\ndefine &quot;Jurisdiction Codes&quot;:\n  { 'UT', 'GA', 'CA', '84054', '84118', '30302' }\n\ndefine &quot;Address is in Jurisdiction Codes&quot;:\n  exists (\n    &quot;Address Elements Relevant to Jurisdiction Qualification&quot; AddressElement\n      where AddressElement.state in &quot;Jurisdiction Codes&quot;\n        or AddressElement.postalCode in &quot;Jurisdiction Codes&quot;\n  )\n\ndefine &quot;Indeterminate Chlamydia Test Results&quot;:\n  &quot;Chlamydia Test Results&quot; O\n    let organization: [Organization]\n    where (\n      (\n        exists (\n            O.interpretation interpretationConcept\n              where interpretationConcept as CodeableConcept in &quot;Indeterminate or Equivocal Lab Result Value&quot;\n        )\n          or O.value as CodeableConcept in &quot;Indeterminate or Equivocal Lab Result Value&quot;\n      )\n        and &quot;Address is in Jurisdiction Codes&quot;\n    )\n\ndefine &quot;Negative Chlamydia Test Results&quot;:\n  &quot;Chlamydia Test Results&quot; O\n    let organization: [Organization]\n    where (\n      (\n        exists (\n            O.interpretation interpretationConcept\n              where interpretationConcept as CodeableConcept in &quot;Negative or Undetected Lab Result Value&quot;\n        )\n          or O.value as CodeableConcept in &quot;Negative or Undetected Lab Result Value&quot;\n      )\n        and &quot;Address is in Jurisdiction Codes&quot;\n    ) */\n\ndefine &quot;IsReportable&quot;: exists (&quot;Chlamydia ValueSets&quot;)\n  /* exists &quot;Indeterminate Chlamydia Test Results&quot;\n    or exists &quot;Negative Chlamydia Test Results&quot; */\n</code></pre>\r\n                    \r\n                    \r\n                </td>\r\n            </tr>\r\n        \r\n    </table>\r\n</div>"
  },      
  "version": "1.0.0",
  "name": "RuleFilters",
  "url": "http://test.canonical/Library/RuleFilters|1.0.0",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://hl7.org/fhir/codesystem-library-type.html",
        "code": "logic-library"
      }
    ]
  },
  "relatedArtifact": [
    {
      "type": "depends-on",
      "resource": "http://aphl.org/fhir/ecr/Library/library-FHIRHelpers|4.0.0"
    }
  ],
  "dataRequirement": [
    {
      "type": "Patient"
    }
  ],
  "content": [
    {
      "contentType": "application/elm+xml",
      "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxsaWJyYXJ5IHhtbG5zPSJ1cm46aGw3LW9yZzplbG06cjEiIHhtbG5zOnQ9InVybjpobDctb3JnOmVsbS10eXBlczpyMSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6eHNkPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6Zmhpcj0iaHR0cDovL2hsNy5vcmcvZmhpciIgeG1sbnM6cWRtNDM9InVybjpoZWFsdGhpdC1nb3Y6cWRtOnY0XzMiIHhtbG5zOnFkbTUzPSJ1cm46aGVhbHRoaXQtZ292OnFkbTp2NV8zIiB4bWxuczphPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiPg0KICAgPGFubm90YXRpb24gdHJhbnNsYXRvck9wdGlvbnM9IkVuYWJsZURhdGVSYW5nZU9wdGltaXphdGlvbiIgeHNpOnR5cGU9ImE6Q3FsVG9FbG1JbmZvIi8+DQogICA8aWRlbnRpZmllciBpZD0iUnVsZUZpbHRlcnMiIHZlcnNpb249IjEuMC4wIi8+DQogICA8c2NoZW1hSWRlbnRpZmllciBpZD0idXJuOmhsNy1vcmc6ZWxtIiB2ZXJzaW9uPSJyMSIvPg0KICAgPHVzaW5ncz4NCiAgICAgIDxkZWYgbG9jYWxJZGVudGlmaWVyPSJTeXN0ZW0iIHVyaT0idXJuOmhsNy1vcmc6ZWxtLXR5cGVzOnIxIi8+DQogICAgICA8ZGVmIGxvY2FsSWRlbnRpZmllcj0iRkhJUiIgdXJpPSJodHRwOi8vaGw3Lm9yZy9maGlyIiB2ZXJzaW9uPSI0LjAuMCIvPg0KICAgPC91c2luZ3M+DQogICA8aW5jbHVkZXM+DQogICAgICA8ZGVmIGxvY2FsSWRlbnRpZmllcj0iRkhJUkhlbHBlcnMiIHBhdGg9IkZISVJIZWxwZXJzIiB2ZXJzaW9uPSI0LjAuMCIvPg0KICAgPC9pbmNsdWRlcz4NCiAgIDxwYXJhbWV0ZXJzPg0KICAgICAgPGRlZiBuYW1lPSJUcmlnZ2VyaW5nIEVuY291bnRlciIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8cGFyYW1ldGVyVHlwZVNwZWNpZmllciBuYW1lPSJmaGlyOkVuY291bnRlciIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPg0KICAgICAgPC9kZWY+DQogICA8L3BhcmFtZXRlcnM+DQogICA8Y29kZVN5c3RlbXM+DQogICAgICA8ZGVmIG5hbWU9IlVzYWdlQ29udGV4dCIgaWQ9Imh0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdXNhZ2UtY29udGV4dC10eXBlIiBhY2Nlc3NMZXZlbD0iUHVibGljIi8+DQogICA8L2NvZGVTeXN0ZW1zPg0KICAgPHZhbHVlU2V0cz4NCiAgICAgIDxkZWYgbmFtZT0iSW5kZXRlcm1pbmF0ZSBvciBFcXVpdm9jYWwgTGFiIFJlc3VsdCBWYWx1ZSIgaWQ9Imh0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzc2Mi4xLjQuMTE0Ni4xMDM1IiBhY2Nlc3NMZXZlbD0iUHVibGljIi8+DQogICAgICA8ZGVmIG5hbWU9Ik5lZ2F0aXZlIG9yIFVuZGV0ZWN0ZWQgTGFiIFJlc3VsdCBWYWx1ZSIgaWQ9Imh0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzc2Mi4xLjQuMTE0Ni4xMDM0IiBhY2Nlc3NMZXZlbD0iUHVibGljIi8+DQogICA8L3ZhbHVlU2V0cz4NCiAgIDxjb2Rlcz4NCiAgICAgIDxkZWYgbmFtZT0iZm9jdXMiIGlkPSJmb2N1cyIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8Y29kZVN5c3RlbSBuYW1lPSJVc2FnZUNvbnRleHQiLz4NCiAgICAgIDwvZGVmPg0KICAgPC9jb2Rlcz4NCiAgIDxzdGF0ZW1lbnRzPg0KICAgICAgPGRlZiBuYW1lPSJQYXRpZW50IiBjb250ZXh0PSJQYXRpZW50Ij4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJTaW5nbGV0b25Gcm9tIj4NCiAgICAgICAgICAgIDxvcGVyYW5kIGRhdGFUeXBlPSJmaGlyOlBhdGllbnQiIHhzaTp0eXBlPSJSZXRyaWV2ZSIvPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IkNobGFteWRpYSBWYWx1ZVNldHMiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGV4cHJlc3Npb24gZGF0YVR5cGU9ImZoaXI6UGF0aWVudCIgeHNpOnR5cGU9IlJldHJpZXZlIi8+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iSXNSZXBvcnRhYmxlIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJFeGlzdHMiPg0KICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iQ2hsYW15ZGlhIFZhbHVlU2V0cyIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgPC9zdGF0ZW1lbnRzPg0KPC9saWJyYXJ5Pg0K"
    },
    {
      "contentType": "text/cql",
      "data": "bGlicmFyeSBSdWxlRmlsdGVycyB2ZXJzaW9uICcxLjAuMCcKCnVzaW5nIEZISVIgdmVyc2lvbiAnNC4wLjAnCgppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzQuMC4wJwoKY29kZXN5c3RlbSAiVXNhZ2VDb250ZXh0IjogJ2h0dHA6Ly90ZXJtaW5vbG9neS5obDcub3JnL0NvZGVTeXN0ZW0vdXNhZ2UtY29udGV4dC10eXBlJwp2YWx1ZXNldCAiSW5kZXRlcm1pbmF0ZSBvciBFcXVpdm9jYWwgTGFiIFJlc3VsdCBWYWx1ZSI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM3NjIuMS40LjExNDYuMTAzNScKdmFsdWVzZXQgIk5lZ2F0aXZlIG9yIFVuZGV0ZWN0ZWQgTGFiIFJlc3VsdCBWYWx1ZSI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM3NjIuMS40LjExNDYuMTAzNCcKCmNvZGUgImZvY3VzIjogJ2ZvY3VzJyBmcm9tIFVzYWdlQ29udGV4dAovL2NvZGUgIkNobGFteWRpYSI6ICdDaGxhbXlkaWEnCgpwYXJhbWV0ZXIgIlRyaWdnZXJpbmcgRW5jb3VudGVyIiBFbmNvdW50ZXIKCmNvbnRleHQgUGF0aWVudAoKZGVmaW5lICJDaGxhbXlkaWEgVmFsdWVTZXRzIjogW1BhdGllbnRdCiAgLy9bVmFsdWVTZXRdIFZhbHVlU2V0CiAgICAvKiB3aGVyZSBleGlzdHMgKAogICAgICBWYWx1ZVNldC51c2VDb250ZXh0IFVzZUNvbnRleHQKICAgICAgICB3aGVyZSBVc2VDb250ZXh0LmNvZGUgfiAiZm9jdXMiCiAgICAgICAgICBhbmQgbm90ICBJc051bGwoCiAgICAgICAgICAgIFVzZUNvbnRleHQudmFsdWUgVmFsdWUKICAgICAgICAgICAgICB3aGVyZSBWYWx1ZS50ZXh0ID0gJ0NobGFteWRpYScKICAgICAgICAgICkKICAgICkgKi8KCi8qIGRlZmluZSBmdW5jdGlvbiBFeHBhbmRWYWx1ZVNldENvZGVzKHZhbHVlIExpc3Q8VmFsdWVTZXQ+KToKICB2YWx1ZSBWYWx1ZQogICAgcmV0dXJuIFZhbHVlLmV4cGFuc2lvbi5jb250YWlucy5jb2RlCgpkZWZpbmUgZnVuY3Rpb24gRXhwYW5kVmFsdWVTZXRTeXN0ZW1zKHZhbHVlIExpc3Q8VmFsdWVTZXQ+KToKICB2YWx1ZSBWYWx1ZQogICAgcmV0dXJuIFZhbHVlLmV4cGFuc2lvbi5jb250YWlucy5zeXN0ZW0KCmRlZmluZSAiRmxhdHRlbmVkIFZhbHVlU2V0IEV4cGFuc2lvbiBDb2RlcyI6CiAgZmxhdHRlbiggRXhwYW5kVmFsdWVTZXRDb2RlcygiQ2hsYW15ZGlhIFZhbHVlU2V0cyIpICkKCmRlZmluZSAiRmxhdHRlbmVkIFZhbHVlU2V0IEV4cGFuc2lvbiBTeXN0ZW1zIjoKICBmbGF0dGVuKCBFeHBhbmRWYWx1ZVNldFN5c3RlbXMoIkNobGFteWRpYSBWYWx1ZVNldHMiKSApCgpkZWZpbmUgZnVuY3Rpb24gT2JzZXJ2YXRpb25XaXRoU3lzdGVtQW5kQ29kZUluQ2hsYW15ZGlhVmFsdWVTZXRzKG9ic2VydmF0aW9uIE9ic2VydmF0aW9uKToKICAgIG5vdCBJc051bGwoCiAgICAgIG9ic2VydmF0aW9uLmNvZGUgIE9Db25jZXB0CiAgICAgICAgd2hlcmUgZXhpc3RzICgKICAgICAgICAgIE9Db25jZXB0LmNvZGluZyBPQ29kaW5nCiAgICAgICAgICAgIHdoZXJlICggT0NvZGluZy5jb2RlIGluICJGbGF0dGVuZWQgVmFsdWVTZXQgRXhwYW5zaW9uIENvZGVzIiApCiAgICAgICAgICAgICAgIGFuZCBPQ29kaW5nLnN5c3RlbSBpbiAiRmxhdHRlbmVkIFZhbHVlU2V0IEV4cGFuc2lvbiBTeXN0ZW1zIgogICAgICAgICkKICAgICkKCmRlZmluZSBmdW5jdGlvbiBPYnNlcnZhdGlvbldpdGhDb2RlSW5DaGxhbXlkaWFWYWx1ZVNldHMob2JzZXJ2YXRpb24gT2JzZXJ2YXRpb24pOgogIG5vdCBJc051bGwoCiAgICBvYnNlcnZhdGlvbi5jb2RlICBPQ29uY2VwdAogICAgICB3aGVyZSBleGlzdHMgKAogICAgICAgIE9Db25jZXB0LmNvZGluZyBPQ29kaW5nIHdoZXJlIE9Db2RpbmcuY29kZSBpbiBmbGF0dGVuKCBFeHBhbmRWYWx1ZVNldENvZGVzKCJDaGxhbXlkaWEgVmFsdWVTZXRzIikgKQogICAgICApCiAgKQoKZGVmaW5lIGZ1bmN0aW9uIENobGFteWRpYU9ic2VydmF0aW9ucyhvYnNlcnZhdGlvbiBPYnNlcnZhdGlvbik6CiAgaWYgZXhpc3RzIChvYnNlcnZhdGlvbi5jb2RlLmNvZGluZy5zeXN0ZW0pCiAgdGhlbiBPYnNlcnZhdGlvbldpdGhTeXN0ZW1BbmRDb2RlSW5DaGxhbXlkaWFWYWx1ZVNldHMob2JzZXJ2YXRpb24pCiAgZWxzZSBPYnNlcnZhdGlvbldpdGhDb2RlSW5DaGxhbXlkaWFWYWx1ZVNldHMob2JzZXJ2YXRpb24pCgpkZWZpbmUgIkNobGFteWRpYSBUZXN0IFJlc3VsdHMiOgogIFtPYnNlcnZhdGlvbl0gTwogICAgd2hlcmUgQ2hsYW15ZGlhT2JzZXJ2YXRpb25zKE8pCiAgICAgIGFuZCBPLnN0YXR1cyBpbiB7ICdwcmVsaW1pbmFyeScsICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQoKZGVmaW5lICJFbmNvdW50ZXIgTG9jYXRpb24gUmVmZXJlbmNlcyI6CiAgIlRyaWdnZXJpbmcgRW5jb3VudGVyIiBUcmlnZ2VyaW5nRW5jb3VudGVyCiAgICByZXR1cm4gVHJpZ2dlcmluZ0VuY291bnRlci5sb2NhdGlvbi5sb2NhdGlvbgoKZGVmaW5lICJMb2NhdGlvbnMgTWF0Y2hpbmcgRW5jb3VudGVyIExvY2F0aW9uIFJlZmVyZW5jZXMiOgogIFtMb2NhdGlvbl0gTG9jYXRpb24KICAgIHdoZXJlIGV4aXN0cyAoCiAgICAgICAgIkVuY291bnRlciBMb2NhdGlvbiBSZWZlcmVuY2VzIiBMb2NhdGlvblJlZmVyZW5jZQogICAgICAgICAgd2hlcmUgTG9jYXRpb24uaWQgfiBMb2NhdGlvblJlZmVyZW5jZS5yZWZlcmVuY2UKICAgICAgKQoKZGVmaW5lICJFbmNvdW50ZXIgTG9jYXRpb24gQWRkcmVzc2VzIEFuZCBQYXRpZW50IEFkZHJlc3NlcyI6CiAgIkxvY2F0aW9ucyBNYXRjaGluZyBFbmNvdW50ZXIgTG9jYXRpb24gUmVmZXJlbmNlcyIuYWRkcmVzcwogICAgdW5pb24gUGF0aWVudC5hZGRyZXNzCgpkZWZpbmUgIkFkZHJlc3MgRWxlbWVudHMgUmVsZXZhbnQgdG8gSnVyaXNkaWN0aW9uIFF1YWxpZmljYXRpb24iOgogICJFbmNvdW50ZXIgTG9jYXRpb24gQWRkcmVzc2VzIEFuZCBQYXRpZW50IEFkZHJlc3NlcyIgQWRkcmVzcwogICAgcmV0dXJuIFR1cGxlIHsgc3RhdGU6IEFkZHJlc3Muc3RhdGUsICBwb3N0YWxDb2RlOiBBZGRyZXNzLnBvc3RhbENvZGUgfQoKZGVmaW5lICJKdXJpc2RpY3Rpb24gQ29kZXMiOgogIHsgJ1VUJywgJ0dBJywgJ0NBJywgJzg0MDU0JywgJzg0MTE4JywgJzMwMzAyJyB9CgpkZWZpbmUgIkFkZHJlc3MgaXMgaW4gSnVyaXNkaWN0aW9uIENvZGVzIjoKICBleGlzdHMgKAogICAgIkFkZHJlc3MgRWxlbWVudHMgUmVsZXZhbnQgdG8gSnVyaXNkaWN0aW9uIFF1YWxpZmljYXRpb24iIEFkZHJlc3NFbGVtZW50CiAgICAgIHdoZXJlIEFkZHJlc3NFbGVtZW50LnN0YXRlIGluICJKdXJpc2RpY3Rpb24gQ29kZXMiCiAgICAgICAgb3IgQWRkcmVzc0VsZW1lbnQucG9zdGFsQ29kZSBpbiAiSnVyaXNkaWN0aW9uIENvZGVzIgogICkKCmRlZmluZSAiSW5kZXRlcm1pbmF0ZSBDaGxhbXlkaWEgVGVzdCBSZXN1bHRzIjoKICAiQ2hsYW15ZGlhIFRlc3QgUmVzdWx0cyIgTwogICAgbGV0IG9yZ2FuaXphdGlvbjogW09yZ2FuaXphdGlvbl0KICAgIHdoZXJlICgKICAgICAgKAogICAgICAgIGV4aXN0cyAoCiAgICAgICAgICAgIE8uaW50ZXJwcmV0YXRpb24gaW50ZXJwcmV0YXRpb25Db25jZXB0CiAgICAgICAgICAgICAgd2hlcmUgaW50ZXJwcmV0YXRpb25Db25jZXB0IGFzIENvZGVhYmxlQ29uY2VwdCBpbiAiSW5kZXRlcm1pbmF0ZSBvciBFcXVpdm9jYWwgTGFiIFJlc3VsdCBWYWx1ZSIKICAgICAgICApCiAgICAgICAgICBvciBPLnZhbHVlIGFzIENvZGVhYmxlQ29uY2VwdCBpbiAiSW5kZXRlcm1pbmF0ZSBvciBFcXVpdm9jYWwgTGFiIFJlc3VsdCBWYWx1ZSIKICAgICAgKQogICAgICAgIGFuZCAiQWRkcmVzcyBpcyBpbiBKdXJpc2RpY3Rpb24gQ29kZXMiCiAgICApCgpkZWZpbmUgIk5lZ2F0aXZlIENobGFteWRpYSBUZXN0IFJlc3VsdHMiOgogICJDaGxhbXlkaWEgVGVzdCBSZXN1bHRzIiBPCiAgICBsZXQgb3JnYW5pemF0aW9uOiBbT3JnYW5pemF0aW9uXQogICAgd2hlcmUgKAogICAgICAoCiAgICAgICAgZXhpc3RzICgKICAgICAgICAgICAgTy5pbnRlcnByZXRhdGlvbiBpbnRlcnByZXRhdGlvbkNvbmNlcHQKICAgICAgICAgICAgICB3aGVyZSBpbnRlcnByZXRhdGlvbkNvbmNlcHQgYXMgQ29kZWFibGVDb25jZXB0IGluICJOZWdhdGl2ZSBvciBVbmRldGVjdGVkIExhYiBSZXN1bHQgVmFsdWUiCiAgICAgICAgKQogICAgICAgICAgb3IgTy52YWx1ZSBhcyBDb2RlYWJsZUNvbmNlcHQgaW4gIk5lZ2F0aXZlIG9yIFVuZGV0ZWN0ZWQgTGFiIFJlc3VsdCBWYWx1ZSIKICAgICAgKQogICAgICAgIGFuZCAiQWRkcmVzcyBpcyBpbiBKdXJpc2RpY3Rpb24gQ29kZXMiCiAgICApICovCgpkZWZpbmUgIklzUmVwb3J0YWJsZSI6IGV4aXN0cyAoIkNobGFteWRpYSBWYWx1ZVNldHMiKQogIC8qIGV4aXN0cyAiSW5kZXRlcm1pbmF0ZSBDaGxhbXlkaWEgVGVzdCBSZXN1bHRzIgogICAgb3IgZXhpc3RzICJOZWdhdGl2ZSBDaGxhbXlkaWEgVGVzdCBSZXN1bHRzIiAqLwo="
    }
  ]
}